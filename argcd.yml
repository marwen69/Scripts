---
- name: Deploy Argo CD on Kubernetes
  hosts: master
  become: yes
  vars:
    argocd_version: "v2.9.3"
    argocd_namespace: "argocd"
    argocd_port: 8080
    argocd_nodeport: 32686  # Forced NodePort

  tasks:
    - name: Verify cluster connectivity
      shell: kubectl cluster-info
      register: cluster_status
      changed_when: false
      failed_when: cluster_status.rc != 0

    - name: Create Argo CD namespace
      shell: kubectl create namespace {{ argocd_namespace }}
      ignore_errors: yes
      register: ns_create
      changed_when: "'already exists' not in ns_create.stderr"

    - name: Install Argo CD
      shell: |
        kubectl apply -n {{ argocd_namespace }} -f https://raw.githubusercontent.com/argoproj/argo-cd/{{ argocd_version }}/manifests/install.yaml

    - name: Expose Argo CD Server (Force NodePort 32686)
      shell: |
        kubectl patch svc argocd-server -n {{ argocd_namespace }} -p '{"spec": {"type": "NodePort", "ports": [{"port": 443, "nodePort": 32686, "protocol": "TCP"}]}}'
      register: svc_patch
      changed_when: "'no change' not in svc_patch.stdout"

    - name: Add worker node labels
      command: kubectl label nodes {{ item }} node-role.kubernetes.io/worker= --overwrite
      loop: "{{ groups.workers }}"
      delegate_to: "{{ groups.master[0] }}"
      run_once: yes
      ignore_errors: yes

    - name: Schedule Argo CD on worker nodes
      shell: |
        kubectl patch deployment -n {{ argocd_namespace }} {{ item }} \
          --type=json \
          -p='[{"op": "add", "path": "/spec/template/spec/nodeSelector", "value": {"node-role.kubernetes.io/worker": ""}}]'
      loop:
        - argocd-server
        - argocd-repo-server
        - argocd-application-controller
        - argocd-redis
        - argocd-dex-server
      register: patch_result
      failed_when: false
      changed_when: "'no change' not in patch_result.stdout"

    - name: Get Argo CD admin password
      shell: |
        kubectl -n {{ argocd_namespace }} get secret argocd-initial-admin-secret \
          -o jsonpath="{.data.password}" | base64 -d
      register: argocd_password
      changed_when: false
      no_log: true

    - name: Display access information
      debug:
        msg: |
          Argo CD deployed successfully!
          URL: https://{{ groups.workers[0] }}:{{ argocd_nodeport }}
          Username: admin
          Password: {{ argocd_password.stdout }}
          Local access: kubectl port-forward svc/argocd-server -n {{ argocd_namespace }} {{ argocd_nodeport }}:443

    - name: Ensure firewall allows NodePort
      firewalld:
        port: "{{ argocd_nodeport }}/tcp"
        permanent: yes
        state: enabled
      become: yes
